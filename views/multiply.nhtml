<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN">

<html lang="en">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
	<title>Multiplication Tables</title>
</head>
<body>
<h1>{{message}}</h1>
<p>This is an example of the benefits of JS on the server. This page draws a multiplication table. The cool thing is that the functions that render the table to html and generate the table data are passed through to the client, so they can be executed again with out a round trip. But if you like, you can execute this module again "rpc" style, in which only the data that would normally be passed to the viewLoader is passed directly back to the client.</p>
<p>The server <strong>will not allow you to ask for lengths greater than 100</strong>. This is because the multiplication table function is recursive and eats memory for lunch. At values of over 2000 the Javascript engine (V8) segfaults. If you want to do it on the client, be my guest, but you might crash your browser.</p>
<div id="table">
     {{table}}   
</div>


<div id="form">
    <form action="{{action}}" method="get">
        <p><legend>Redraw the table with a new length:</legend></p>
        <label for="length">New Length</label>
        <input type="text" name="length" value="{{length}}" id="length" />
        <label for="onserver">Compute on server</label><input id="onserver" type="checkbox" name="onserver" value="true" id="onserver">
        
        <p><input type="submit" value="Continue &rarr;" /></p>
    </form>
</div>
<h3>Server Response</h3>
<div id="response">
    
</div>
</body>
<script type="text/javascript" src="http://yui.yahooapis.com/combo?3.0.0/build/yui/yui-min.js"></script>
<script type="text/javascript" charset="utf-8">
    YUI().use('io-base', 'node', 'json', function(Y) {
        var uri = "{{action}}?rpc=true";
        
        var tableCache = {};
        //outputs multidimensional array containing multiplication tables
        {{mTable}}
        
        //renders html table from multidimensional array
        {{htmlTable}}
        
        function complete(id, o, args){
            var data = Y.JSON.parse(o.responseText);
            Y.one('#table').set('innerHTML', htmlTable(data.table));
            Y.one('#response').set('innerHTML', '<textarea rows="20" cols="80">'+o.responseText+'</textarea>');
        }
        
        function makeRequest(){
            var req = Y.io(uri);
        }
        
        Y.on('io:complete', complete, this);
        
        Y.one('#form').on('submit', function(e){
            e.preventDefault();
            var length = e.target.query('#length').get('value'),
            onserver = e.target.query('#onserver').get('checked');
            if(!onserver){
                if(tableCache[length]){
                    var tableString = tableCache[length];
                }else{
                    tableString = htmlTable(mTable(length));
                    tableCache[length] = tableString;
                }
                Y.one('#table').set('innerHTML', tableString);
                Y.one('#response').set('innerHTML', '(no request made)');
            }else{
                uri += '&length='+length;
                makeRequest();
            }
            
        });
    });
</script>
</html>
